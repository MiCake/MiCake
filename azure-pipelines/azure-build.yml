# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildConfiguration: 'Release'

parameters:
  - name: pushPackageToNuget
    displayName: 'Do you wanna push package to nuget.org? (please make sure your version settings are correct)'
    type: boolean
    default: false

  - name: pushSupportLibraries
    displayName: 'Do you want to push [MiCake-Support-Libraries] at the same time?'
    type: boolean
    default: false

steps:
- task: UseDotNet@2
  displayName: 'Set current .NET version to $(dotnet_version)'
  inputs:
    packageType: 'sdk'
    version: '$(dotnet_version)'
    
- task: DotNetCoreCLI@2
  displayName: 'Build current projects'
  inputs:
    command: 'build'
    projects: 'src/**/*.csproj'
    arguments: '--configuration $(BuildConfiguration)'

# Run all tests
- task: DotNetCoreCLI@2
  displayName: Run Tests
  inputs:
    command: test
    projects: 'src/tests/**/*.csproj'
    arguments: -c $(BuildConfiguration) --settings $(Build.SourcesDirectory)/src/tests/runsettings.xml --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true

# Generate test report
- task: DotNetCoreCLI@2
  displayName: Install ReportGenerator tool
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . dotnet-reportgenerator-globaltool
  
- script: ./reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
  displayName: Create reports
  
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml 

# Push package to nuget
- ${{ if eq(parameters.pushPackageToNuget, true) }}:
  - ${{ if eq(parameters.pushSupportLibraries, true) }}:
    - task: DotNetCoreCLI@2
      displayName: 'Package All project(Core + Support) to nuget.'
      inputs:
        command: 'pack'
        packagesToPack: '$(Build.SourcesDirectory)/src/framework/**/*.csproj'
        nobuild: true
        includesymbols: true
        includesource: true
        versioningScheme: 'off'

  - ${{ if eq(parameters.pushSupportLibraries, false) }}:
    - task: DotNetCoreCLI@2
      displayName: 'Package Core project to nuget.'
      inputs:
        command: 'pack'
        packagesToPack: '$(Build.SourcesDirectory)/src/framework/core/**/*.csproj'
        nobuild: true
        includesymbols: true
        includesource: true
        versioningScheme: 'off'
  
  - task: NuGetCommand@2
    displayName: 'Push nuget packages to nuget.org'
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
      nuGetFeedType: 'external'
      publishFeedCredentials: 'MiCake_NuGet_Key'

